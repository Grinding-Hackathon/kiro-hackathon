// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef QRCODE_SWIFT_H
#define QRCODE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AppKit;
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="QRCode",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// A boolean matrix (Array2D<Bool> wrapper) with equal dimensions in row and column
SWIFT_CLASS_NAMED("BoolMatrix")
@interface QRCodeBoolMatrix : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (QRCodeBoolMatrix * _Nonnull)copyMatrix SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDimension:(NSInteger)dimension OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDimension:(NSInteger)dimension flattened:(NSArray<NSNumber *> * _Nonnull)flattened OBJC_DESIGNATED_INITIALIZER;
/// A simple initializer to use [0, 1, 1, 0, 1, 0, 0, 0, 0, 1] as the bool initializer
- (nonnull instancetype)initWithDimension:(NSInteger)dimension rawFlattenedInt:(NSArray<NSNumber *> * _Nonnull)rawFlattenedInt OBJC_DESIGNATED_INITIALIZER;
/// The dimension of the QR code
@property (nonatomic, readonly) NSInteger dimension;
/// Return a flattened version of the bool matrix
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull flattened;
/// Returns a new matrix with toggled values
@property (nonatomic, readonly, strong) QRCodeBoolMatrix * _Nonnull flipped;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// A protocol for wrapping generating the data shape for a path
SWIFT_PROTOCOL("_TtP6QRCode25QRCodePixelShapeGenerator_")
@protocol QRCodePixelShapeGenerator
/// The unique name for identifying the pixel shape
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The user-facing title for the generator
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create a pixel shape generator using the provided settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the shape object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Generate a path representing the ‘on’ pixels within the specified matrix
/// \param matrix The matrix
///
/// \param size The dimensions of the path to generate
///
///
/// returns:
/// A path representing the specified matrix data
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Returns a storable representation of the shape handler
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Does the shape generator support setting values for a particular key?
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


/// A circle pixel shape
SWIFT_CLASS_NAMED("Circle")
@interface QRCodePixelShapeCircle : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create
/// \param insetFraction The inset between each pixel
///
- (nonnull instancetype)initWithInsetFraction:(CGFloat)insetFraction useRandomInset:(BOOL)useRandomInset OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// The fractional inset for the pixel
@property (nonatomic, readonly) CGFloat insetFraction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShapeCircle (SWIFT_EXTENSION(QRCode))
/// Returns true if the shape supports setting a value for the specified key, false otherwise
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the current settings for the shape
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("CurvePixel")
@interface QRCodePixelShapeCurvePixel : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// The corner radius fraction (0 … 1)
@property (nonatomic) CGFloat cornerRadiusFraction;
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction OBJC_DESIGNATED_INITIALIZER;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShapeCurvePixel (SWIFT_EXTENSION(QRCode))
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePixelShapeCurvePixel (SWIFT_EXTENSION(QRCode))
/// Does the shape generator support setting values for a particular key?
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns a storable representation of the shape handler
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@class DSFGradientPin;

/// A color gradient represented as ‘pins’ of color along a 0.0 -> 1.0 range
SWIFT_CLASS_NAMED("DSFGradient")
@interface DSFGradient : NSObject <NSCopying>
@property (nonatomic, readonly, copy) NSArray<DSFGradientPin *> * _Nonnull pins;
@property (nonatomic, readonly) CGGradientRef _Nonnull cgGradient;
/// Make a copy of the gradient
- (DSFGradient * _Nonnull)copyGradient SWIFT_WARN_UNUSED_RESULT;
/// NSCopying conformance for objc
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Create a linear gradient
/// \param pins The color pins to use when generating the gradient
///
/// \param colorspace The colorspace to use. If not specified uses DeviceRGB
///
- (nullable instancetype)initWithPins:(NSArray<DSFGradientPin *> * _Nonnull)pins colorspace:(CGColorSpaceRef _Nullable)colorspace OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Pin")
@interface DSFGradientPin : NSObject <NSCopying>
@property (nonatomic, readonly) CGFloat position;
@property (nonatomic, readonly) CGColorRef _Nonnull color;
/// Create a color pin
- (nonnull instancetype)init:(CGColorRef _Nonnull)color :(CGFloat)position OBJC_DESIGNATED_INITIALIZER;
/// Make a copy of the pin
- (DSFGradientPin * _Nonnull)copyPin SWIFT_WARN_UNUSED_RESULT;
/// NSCopying conformance for objc
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface DSFGradient (SWIFT_EXTENSION(QRCode))
/// Create a DSFGradient archive format string representation of the gradient
/// Format (all values fractional between 0.0 and 1.0):
/// <code>red,green,blue,alpha,position|red,green,blue,alpha,position|red,green,blue,alpha,position:...</code>
/// eg:
/// <code>0.0:1.0,0.0,0.0|0.5:0.0,1.0,0.0,1.0|1.0:0.0,0.0,1.0,1.0</code>
- (NSString * _Nullable)asRGBAGradientString SWIFT_WARN_UNUSED_RESULT;
/// Create a DSFGradient from a DSFGradient archive format string
/// \param content The archive ‘string’
///
///
/// returns:
/// The DSFGradient, or nil if the content didn’t contain a valid DSFGradient archive
+ (DSFGradient * _Nullable)FromRGBAGradientString:(NSString * _Nonnull)content SWIFT_WARN_UNUSED_RESULT;
@end

@class QRCodeShape;
@class QRCodeStyle;

/// The design for the qr code output.
/// This combines :-
/// <ul>
///   <li>
///     a ‘shape’ (the outline shape of the component of the qr code), and
///   </li>
///   <li>
///     a ‘style’ (the fill styles for each component of the qr code)
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("Design")
@interface QRCodeDesign : NSObject
/// Convenience initializer for objc
+ (QRCodeDesign * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
/// The drawing shape for the qr code.
@property (nonatomic, strong) QRCodeShape * _Nonnull shape;
/// The display style for the qr code.
@property (nonatomic, strong) QRCodeStyle * _Nonnull style;
/// Any additional quiet zone beyond the scope of the QR code
@property (nonatomic) NSUInteger additionalQuietZonePixels;
/// Basic initializer for the default style
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Convenience creator for a simple background and foreground color
/// \param foregroundColor The color to use for the foreground
///
/// \param backgroundColor (Optional) The color to use for the background.
///
- (nonnull instancetype)initWithForegroundColor:(CGColorRef _Nonnull)foregroundColor backgroundColor:(CGColorRef _Nullable)backgroundColor OBJC_DESIGNATED_INITIALIZER;
@end

@protocol QRCodeFillStyleGenerator;

@interface QRCodeDesign (SWIFT_EXTENSION(QRCode))
/// Set the foreground color for the design
/// \param color The color to set
///
///
/// returns:
/// This design object
- (QRCodeDesign * _Nonnull)foregroundColor:(CGColorRef _Nonnull)color;
/// Set the foreground style for the design
/// \param fillStyle The fill style generator
///
///
/// returns:
/// This design object
- (QRCodeDesign * _Nonnull)foregroundStyle:(id <QRCodeFillStyleGenerator> _Nonnull)fillStyle;
/// Set the background color for the design
/// \param color The color to set. If nil, the background color is set to clear
///
///
/// returns:
/// This design object
- (QRCodeDesign * _Nonnull)backgroundColor:(CGColorRef _Nullable)color;
@end

@class NSData;

@interface QRCodeDesign (SWIFT_EXTENSION(QRCode))
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Generate a JSON string representation of the document.
- (NSData * _Nullable)jsonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (QRCodeDesign * _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Create a QRCode document from the provided json formatted data
+ (QRCodeDesign * _Nullable)CreateWithJsonData:(NSData * _Nonnull)jsonData SWIFT_WARN_UNUSED_RESULT;
@end


enum QRCodeErrorCorrection : NSInteger;
@class QRCodeLogoTemplate;
@protocol QRCodeEngine;
@protocol QRCodeMessageFormatter;

/// A QR Code document
SWIFT_CLASS_NAMED("Document")
@interface QRCodeDocument : NSObject
/// The correction level to use when generating the QR code
@property (nonatomic) enum QRCodeErrorCorrection errorCorrection;
/// Binary data to display in the QR code
@property (nonatomic, copy) NSData * _Nullable data;
/// Text (utf8 encoded) to display in the QR code.
/// If you need string content using a different encoding, use the <code>data</code> property instead
@property (nonatomic, copy) NSString * _Nullable utf8String;
/// The style to use when drawing the qr code
@property (nonatomic, strong) QRCodeDesign * _Nonnull design;
/// A logo template
@property (nonatomic, strong) QRCodeLogoTemplate * _Nullable logoTemplate;
/// Create a QR code
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Create a QRCode document with default settings
- (nonnull instancetype)initWithGenerator:(id <QRCodeEngine> _Nullable)generator OBJC_DESIGNATED_INITIALIZER;
/// Create a QRCode document
/// \param data The data to encode
///
/// \param errorCorrection The error correction level
///
/// \param generator The generator to use when creating the QR code. Defaults to Core Image
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data errorCorrection:(enum QRCodeErrorCorrection)errorCorrection generator:(id <QRCodeEngine> _Nullable)generator OBJC_DESIGNATED_INITIALIZER;
/// Create a QRCode document containing <code>text</code>
/// \param utf8String The utf8 string to encode
///
/// \param errorCorrection The error correction level
///
/// \param generator The generator to use when creating the QR code. Defaults to Core Image
///
- (nonnull instancetype)initWithUtf8String:(NSString * _Nonnull)utf8String errorCorrection:(enum QRCodeErrorCorrection)errorCorrection generator:(id <QRCodeEngine> _Nullable)generator OBJC_DESIGNATED_INITIALIZER;
/// Create a QRCode document containing the contents of a message formatter
/// \param message The message formatter
///
/// \param errorCorrection The error correction level
///
/// \param generator The generator to use when creating the QR code. Defaults to Core Image
///
- (nonnull instancetype)initWithMessage:(id <QRCodeMessageFormatter> _Nonnull)message errorCorrection:(enum QRCodeErrorCorrection)errorCorrection generator:(id <QRCodeEngine> _Nullable)generator OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Draw the current qrcode document into the specified context and rect
/// \param ctx The drawing context to draw into
///
/// \param rect The bounds within the context to draw into
///
- (void)drawWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect;
@end


@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Set the QR code data using a message formatter
- (void)setMessage:(id <QRCodeMessageFormatter> _Nonnull)message;
/// Make a copy of the document
- (QRCodeDocument * _Nonnull)copyDocument SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Returns an SVG utf8 string representation of the QR code
/// The string always uses Unix newlines (\n), regardless of the platform.
/// \param dimension The dimension of the output svg
///
///
/// returns:
/// An SVG representation of the QR code
- (NSString * _Nonnull)svgWithDimension:(NSInteger)dimension SWIFT_WARN_UNUSED_RESULT;
/// Returns an SVG data representation of the QR Code.
/// The string always uses Unix newlines (\n), regardless of the platform.
/// \param dimension The dimension of the output svg
///
///
/// returns:
/// A UTF8 encoded SVG representation of the QR code
- (NSData * _Nullable)svgDataWithDimension:(NSInteger)dimension SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Returns a boolean matrix representation of the current QR code data
@property (nonatomic, readonly, strong) QRCodeBoolMatrix * _Nonnull boolMatrix;
@end



@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Returns a CGImage representation of the qr code
/// \param dimension The dimension of the image to create
///
///
/// returns:
/// The image, or nil if an error occurred
- (CGImageRef _Nullable)cgImageWithDimension:(NSInteger)dimension SWIFT_WARN_UNUSED_RESULT;
/// Returns a CGImage representation of the qr code
/// \param size The pixel size of the image to generate
///
///
/// returns:
/// The image, or nil if an error occurred
- (CGImageRef _Nullable)cgImage:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

@class QRCodeComponents;

@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Generate a path containing the QR Code components for the current QRCode shape
/// \param size The size of the generated path
///
/// \param components The components of the QR code to include in the path
///
///
/// returns:
/// A path containing the components
- (CGPathRef _Nonnull)path:(CGSize)size components:(QRCodeComponents * _Nonnull)components SWIFT_WARN_UNUSED_RESULT;
/// Generate a path containing the QR Code components for the current QRCode shape
/// \param dimension The dimension of the generated path
///
/// \param components The components of the QR code to include in the path
///
///
/// returns:
/// A path containing the components
- (CGPathRef _Nonnull)pathWithDimension:(NSInteger)dimension components:(QRCodeComponents * _Nonnull)components SWIFT_WARN_UNUSED_RESULT;
@end



@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Return a new document using the style and design supplied by the template data with the specified text
+ (QRCodeDocument * _Nullable)UsingTemplateWithTemplateJSONData:(NSData * _Nonnull)templateJSONData text:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return an image using the style and design supplied by the template data with the specified text
+ (NSData * _Nullable)PNGUsingTemplateWithTemplateJSONData:(NSData * _Nonnull)templateJSONData text:(NSString * _Nonnull)text dimension:(NSInteger)dimension SWIFT_WARN_UNUSED_RESULT;
/// Return a pdf using the style and design supplied by the template data with the specified text
+ (NSData * _Nullable)PDFUsingTemplateWithTemplateJSONData:(NSData * _Nonnull)templateJSONData text:(NSString * _Nonnull)text dimension:(NSInteger)dimension resolution:(CGFloat)resolution SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// This is the number of cells along any edge of the qr code
@property (nonatomic, readonly) NSInteger cellDimension;
/// The dimension for an individual cell for the given image dimension
- (CGFloat)cellSizeForImageDimension:(NSInteger)dimension SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Build the QR Code using the given data and error correction
- (void)updateWithData:(NSData * _Nonnull)data errorCorrection:(enum QRCodeErrorCorrection)errorCorrection;
/// Build the QR Code using the given text and error correction
- (void)updateWithText:(NSString * _Nonnull)text errorCorrection:(enum QRCodeErrorCorrection)errorCorrection;
/// Build the QR Code using the given message formatter and error correction
- (void)updateWithMessage:(id <QRCodeMessageFormatter> _Nonnull)message errorCorrection:(enum QRCodeErrorCorrection)errorCorrection;
@end

@class NSPasteboard;

@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Add QRCode representations to the specified pasteboard
/// \param pasteboard The pasteboard to receive the representations
///
/// \param size The size of the QRCode to generate
///
/// \param dpi The DPI for the resulting image
///
- (void)addToPasteboardWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi pasteboard:(NSPasteboard * _Nonnull)pasteboard;
/// Add QRCode representations to the specified pasteboard
/// \param size The size of the QRCode to generate
///
/// \param scale The scale (eg. scale=2 -> retina -> 144dpi)
///
/// \param pasteboard The pasteboard to receive the representations
///
- (void)addToPasteboard:(CGSize)size dpi:(CGFloat)dpi pasteboard:(NSPasteboard * _Nonnull)pasteboard;
@end


@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// The current settings for the data, shape and design for the QRCode
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Generate a JSON string representation of the document.
- (NSData * _Nullable)jsonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generate a pretty-printed JSON string representation of the document.
- (NSString * _Nullable)jsonStringFormatted SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// A simple ASCII representation of the core QRCode data.
/// Example output (data is “testing”)
/// \code
///  ██████████████    ██  ████  ██████████████
///  ██          ██  ████  ██    ██          ██
///  ██  ██████  ██  ████    ██  ██  ██████  ██
///  ██  ██████  ██    ██  ██    ██  ██████  ██
///  ██  ██████  ██  ██      ██  ██  ██████  ██
///  ██          ██  ██    ████  ██          ██
///  ██████████████  ██  ██  ██  ██████████████
///                  ██████████
///  ████  ██    ████  ████      ██████  ████
///  ██  ████████      ██        ████      ████
///  ████████    ████    ██  ████      ████  ██
///  ████  ████    ██  ██  ██        ████  ████
///  ████  ████  ██      ██  ██  ████████  ████
///                  ████  ██      ██  ██  ████
///  ██████████████  ████      ██  ████    ██
///  ██          ██      ████████  ████      ██
///  ██  ██████  ██        ██    ████████    ██
///  ██  ██████  ██  ██  ████      ██████  ████
///  ██  ██████  ██      ██  ██    ████  ██  ██
///  ██          ██  ██  ██    ████  ██
///  ██████████████  ██  ██████        ██  ██
///
///
/// \endcode
@property (nonatomic, readonly, copy) NSString * _Nonnull asciiRepresentation;
/// A simple smaller ASCII representation of the core QRCode data
/// Example output (data is “testing”)
/// \code
///  ▄▄▄▄▄▄▄  ▄ ▄▄ ▄▄▄▄▄▄▄
///  █ ▄▄▄ █ ██ ▀▄ █ ▄▄▄ █
///  █ ███ █ ▄▀ ▀▄ █ ███ █
///  █▄▄▄▄▄█ █ ▄▀█ █▄▄▄▄▄█
///  ▄▄ ▄  ▄▄▀██▀▀ ▄▄▄ ▄▄
///  █▄██▀▀▄▄ ▀▄ ▄▄▀▀ ▄▄▀█
///  ██ ██ ▄▀ ▀▄▀▄ ▄▄██ ██
///  ▄▄▄▄▄▄▄ ██ ▀ ▄ █▄▀ █▀
///  █ ▄▄▄ █   ▀█▀▀▄██▄  █
///  █ ███ █ ▀ █▀▄  ██▀▄▀█
///  █▄▄▄▄▄█ █ █▄▄▀▀ ▀▄ ▄
///
///
/// \endcode
@property (nonatomic, readonly, copy) NSString * _Nonnull smallAsciiRepresentation;
@end


@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Create a QRCode document using the QRCode settings defined in <code>jsonData</code>
/// \param jsonData The data to display (json format)
///
/// \param generator The generator to use when creating the QR code. Defaults to Core Image
///
- (nullable instancetype)initWithJsonData:(NSData * _Nonnull)jsonData generator:(id <QRCodeEngine> _Nullable)generator error:(NSError * _Nullable * _Nullable)error;
/// Create a QRCode document using the QRCode settings defined in <code>dictionary</code>
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary generator:(id <QRCodeEngine> _Nullable)generator error:(NSError * _Nullable * _Nullable)error;
/// Load the QRCode content from the specified JSON data
- (BOOL)loadWithJsonData:(NSData * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error;
/// Load the QRCode content from the specified dictionary
- (BOOL)loadWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings error:(NSError * _Nullable * _Nullable)error;
/// Create a QRCode.Document object from the specified settings
/// \param jsonData The qr code settings
///
/// \param generator The generator to use, or nil to use the default (watchOS requires QRCode
///
///
/// returns:
/// A QRCode document
+ (QRCodeDocument * _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings generator:(id <QRCodeEngine> _Nullable)generator error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Create a QRCode document from the provided json formatted data
/// \param jsonData The json formatted qr code to load
///
/// \param generator The generator to use, or nil to use the default (watchOS requires QRCode
///
///
/// returns:
/// A QRCode document
+ (QRCodeDocument * _Nullable)CreateWithJsonData:(NSData * _Nonnull)jsonData generator:(id <QRCodeEngine> _Nullable)generator error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSImage;

@interface QRCodeDocument (SWIFT_EXTENSION(QRCode))
/// Returns a pdf representation of the qr code document
/// \param dimension The dimension of the generated PDF
///
/// \param pdfResolution The resolution of the pdf output
///
///
/// returns:
/// A data object containing the PDF representation of the QR code
- (NSData * _Nullable)pdfDataWithDimension:(NSInteger)dimension pdfResolution:(CGFloat)pdfResolution SWIFT_WARN_UNUSED_RESULT;
/// Returns a pdf representation of the qr code document
/// \param size The page size of the generated PDF
///
/// \param pdfResolution The resolution of the pdf output
///
///
/// returns:
/// A data object containing the PDF representation of the QR code
- (NSData * _Nullable)pdfData:(CGSize)size pdfResolution:(CGFloat)pdfResolution SWIFT_WARN_UNUSED_RESULT;
/// Returns a PNG representation of the QRCode
/// \param dimension The size of the QR code
///
///
/// returns:
/// The PNG data
- (NSData * _Nullable)pngDataWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi SWIFT_WARN_UNUSED_RESULT;
/// Returns a JPEG representation of the QRCode
/// <ul>
///   <li>
///     Parameter
///     <ul>
///       <li>
///         dimension: The size of the QR code
///       </li>
///       <li>
///         dpi: The DPI of the resulting image
///       </li>
///       <li>
///         compression: The compression level to use when generating the JPEG (0.0 -> 1.0)
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
/// The PNG data
- (NSData * _Nullable)jpegDataWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi compression:(double)compression SWIFT_WARN_UNUSED_RESULT;
/// Return a TIFF representation of the QR code
/// \param dimension The dimensions of the image to create
///
/// \param dpi The DPI of the resulting image
///
///
/// returns:
/// The TIFF data
- (NSData * _Nullable)tiffDataWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi SWIFT_WARN_UNUSED_RESULT;
/// Returns a platform specific representation of the qr code document
/// \param dimension The pixel dimension of the image to generate
///
/// \param dpi The DPI of the resulting image
///
///
/// returns:
/// The image, or nil if an error occurred
- (NSImage * _Nullable)platformImageWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi SWIFT_WARN_UNUSED_RESULT;
/// Returns an NSImage representation of the qr code document
/// \param dimension The pixel dimension of the image to generate
///
/// \param dpi The DPI of the resulting image
///
///
/// returns:
/// The image, or nil if an error occurred
- (NSImage * _Nullable)nsImageWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi SWIFT_WARN_UNUSED_RESULT;
/// Returns an NSImage representation of the qr code document
/// \param size The pixel size of the image to generate
///
/// \param dpi The DPI of the resulting image
///
///
/// returns:
/// The image, or nil if an error occurred
- (NSImage * _Nullable)nsImage:(CGSize)size dpi:(CGFloat)dpi SWIFT_WARN_UNUSED_RESULT;
@end


/// The shape of an ‘eye’ within the qr code
SWIFT_CLASS_NAMED("EyeShape")
@interface QRCodeEyeShape : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end

@protocol QRCodePupilShapeGenerator;

/// A protocol for wrapping generating the eye shapes for a path
SWIFT_PROTOCOL("_TtP6QRCode23QRCodeEyeShapeGenerator_")
@protocol QRCodeEyeShapeGenerator
/// The unique string identifier for the eye shape generator
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The user-facing title for the eye shape generator
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
/// Returns a storable representation of the shape handler
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Does the shape generator support setting values for a particular key?
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


/// A ‘rounded rect with a pointy bit facing inwards’ style eye design
SWIFT_CLASS_NAMED("RoundedPointingIn")
@interface QRCodeEyeShapeRoundedPointingIn : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘squircle’ eye style
SWIFT_CLASS_NAMED("Squircle")
@interface QRCodeEyeShapeSquircle : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘square’ style eye design
SWIFT_CLASS_NAMED("Square")
@interface QRCodeEyeShapeSquare : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘rounded rect with a pointy bit facing inwards’ style eye design
SWIFT_CLASS_NAMED("RoundedPointingOut")
@interface QRCodeEyeShapeRoundedPointingOut : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// An eye with vertical bars as the pupil
SWIFT_CLASS_NAMED("BarsVertical")
@interface QRCodeEyeShapeBarsVertical : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘rounded rect’ style eye design
SWIFT_CLASS_NAMED("RoundedRect")
@interface QRCodeEyeShapeRoundedRect : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘shield’ style eye design with configurable corner styles
SWIFT_CLASS_NAMED("Shield")
@interface QRCodeEyeShapeShield : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create a Shield eye shape compatible with objective-c
- (nonnull instancetype)initWithTopLeft:(BOOL)topLeft topRight:(BOOL)topRight bottomLeft:(BOOL)bottomLeft bottomRight:(BOOL)bottomRight OBJC_DESIGNATED_INITIALIZER;
/// Create a shield eye shape using the provided settings
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
/// Returns the default pixel shape for this eye (inherits corners)
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// An eye with vertical bars as the pupil
SWIFT_CLASS_NAMED("BarsHorizontal")
@interface QRCodeEyeShapeBarsHorizontal : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


SWIFT_CLASS_NAMED("Circle")
@interface QRCodeEyeShapeCircle : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘pixel’ style eye design which provides corner radius configuration
SWIFT_CLASS_NAMED("CorneredPixels")
@interface QRCodeEyeShapeCorneredPixels : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGFloat cornerRadiusFraction;
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction OBJC_DESIGNATED_INITIALIZER;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘square’ style eye design
SWIFT_CLASS_NAMED("Edges")
@interface QRCodeEyeShapeEdges : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The fractional corner radius (0 … 1) for the edge bars
@property (nonatomic) CGFloat cornerRadiusFraction;
/// Create an Edge eye shape with the specified corner radius
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction OBJC_DESIGNATED_INITIALIZER;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘leaf’ style eye design
SWIFT_CLASS_NAMED("Leaf")
@interface QRCodeEyeShapeLeaf : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘pixel’ style eye design which provides corner radius configuration
SWIFT_CLASS_NAMED("Pixels")
@interface QRCodeEyeShapePixels : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGFloat cornerRadiusFraction;
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction OBJC_DESIGNATED_INITIALIZER;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeEyeShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘square with a rounded outer corner’ style eye design
SWIFT_CLASS_NAMED("RoundedOuter")
@interface QRCodeEyeShapeRoundedOuter : NSObject <QRCodeEyeShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodeEyeShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodeEyeShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyePath SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)eyeBackgroundPath SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)defaultPupil SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class QRCodeFillStyleSolid;

SWIFT_CLASS_NAMED("FillStyle")
@interface QRCodeFillStyle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Simple convenience for a clear fill
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QRCodeFillStyleSolid * _Nonnull clear;)
+ (QRCodeFillStyleSolid * _Nonnull)clear SWIFT_WARN_UNUSED_RESULT;
@end


/// An object to contain SVG data during rendering
SWIFT_CLASS("_TtCCC6QRCode6QRCode9FillStyle13SVGDefinition")
@interface SVGDefinition : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeFillStyle (SWIFT_EXTENSION(QRCode))
@end


/// A protocol for wrapping fill styles for image generation
SWIFT_PROTOCOL("_TtP6QRCode24QRCodeFillStyleGenerator_")
@protocol QRCodeFillStyleGenerator
/// Get the fill style generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// Create a fill style generator using the specified settings
+ (id <QRCodeFillStyleGenerator> _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the style
- (id <QRCodeFillStyleGenerator> _Nonnull)copyStyle SWIFT_WARN_UNUSED_RESULT;
/// Returns the current settings for the style generator
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Fill the specified rect with the current style settings
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect;
/// Fill the specified path with the current style settings
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect path:(CGPathRef _Nonnull)path;
/// Returns an SVG fill definition object for the fill style
- (SVGDefinition * _Nullable)svgRepresentationWithStyleIdentifier:(NSString * _Nonnull)styleIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


/// A simple radial gradient fill
SWIFT_CLASS_NAMED("RadialGradient")
@interface QRCodeFillStyleRadialGradient : NSObject <QRCodeFillStyleGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The gradient to use
@property (nonatomic, readonly, strong) DSFGradient * _Nonnull gradient;
/// The center point for the radial gradient
@property (nonatomic) CGPoint centerPoint;
/// The current settings for the radial gradient
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Create a radial gradient with the specified settings
+ (id <QRCodeFillStyleGenerator> _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Fill the specified path/rect with a gradient
/// \param gradient The color gradient to use
///
/// \param centerPoint The fractional position within the fill rect to start the radial fill (0.0 -> 1.0)
///
- (nonnull instancetype)init:(DSFGradient * _Nonnull)gradient centerPoint:(CGPoint)centerPoint OBJC_DESIGNATED_INITIALIZER;
/// Fill the specified rect with the gradient
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect;
/// Fill the specified path with the gradient
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect path:(CGPathRef _Nonnull)path;
- (id <QRCodeFillStyleGenerator> _Nonnull)copyStyle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeFillStyle (SWIFT_EXTENSION(QRCode))
@end


/// A image, scaled proportionally to fill the qr code content
SWIFT_CLASS_NAMED("Image")
@interface QRCodeFillStyleImage : NSObject <QRCodeFillStyleGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The image to use for the fill
@property (nonatomic) CGImageRef _Nullable image;
/// Return the save settings for the fill style
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Create the fill style from the specified settings
+ (id <QRCodeFillStyleGenerator> _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Create with an image
- (nonnull instancetype)init:(CGImageRef _Nullable)image OBJC_DESIGNATED_INITIALIZER;
/// Create an image file style using the platform image type
- (nonnull instancetype)initWithImage:(NSImage * _Nullable)image;
/// Returns a new copy of the fill style
- (id <QRCodeFillStyleGenerator> _Nonnull)copyStyle SWIFT_WARN_UNUSED_RESULT;
/// fill the provided rect in the context with the current fill color
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect;
/// fill the provided path in the context with the current fill color
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect path:(CGPathRef _Nonnull)path;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeFillStyle (SWIFT_EXTENSION(QRCode))
@end


/// A simple single-color solid fill style
SWIFT_CLASS_NAMED("Solid")
@interface QRCodeFillStyleSolid : NSObject <QRCodeFillStyleGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The fill color
@property (nonatomic, readonly) CGColorRef _Nonnull color;
/// The color settings as a dictionary
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Create a Solid fill style using the provided settings dictionary
/// \param settings The settings dictionary
///
///
/// returns:
/// A solid fill style object
+ (id <QRCodeFillStyleGenerator> _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Create with a color
- (nonnull instancetype)init:(CGColorRef _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
/// Create a color from srgb float values
- (nonnull instancetype)initWithSrgbRed:(CGFloat)srgbRed green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha;
/// Create a color from rgb float values
- (nonnull instancetype)init:(CGFloat)red :(CGFloat)green :(CGFloat)blue alpha:(CGFloat)alpha;
/// Create a color from gray values
- (nonnull instancetype)initWithGray:(CGFloat)gray alpha:(CGFloat)alpha;
/// Returns a new copy of the fill style
- (id <QRCodeFillStyleGenerator> _Nonnull)copyStyle SWIFT_WARN_UNUSED_RESULT;
/// fill the provided rect in the context with the current fill color
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect;
/// fill the provided path in the context with the current fill color
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect path:(CGPathRef _Nonnull)path;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeFillStyle (SWIFT_EXTENSION(QRCode))
@end


/// A simple linear gradient fill style
SWIFT_CLASS_NAMED("LinearGradient")
@interface QRCodeFillStyleLinearGradient : NSObject <QRCodeFillStyleGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The gradient
@property (nonatomic, readonly, strong) DSFGradient * _Nonnull gradient;
/// linear starting point (0 -> 1)
@property (nonatomic, readonly) CGPoint startPoint;
/// linear ending point (0 -> 1)
@property (nonatomic, readonly) CGPoint endPoint;
/// The current settings for the linear gradient
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Create a linear gradient with the specified settings
+ (id <QRCodeFillStyleGenerator> _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Fill the specified path/rect with a gradient
/// \param gradient The color gradient to use
///
/// \param startPoint The fractional position within the fill rect to start the gradient (0.0 -> 1.0)
///
/// \param endPoint The fractional position within the fill rect to end the gradient (0.0 -> 1.0)
///
- (nonnull instancetype)init:(DSFGradient * _Nonnull)gradient startPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint OBJC_DESIGNATED_INITIALIZER;
/// Fill the specified rect with the gradient
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect;
/// Fill the specified path with the gradient
- (void)fillWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect path:(CGPathRef _Nonnull)path;
/// Create a copy of the style
- (id <QRCodeFillStyleGenerator> _Nonnull)copyStyle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A flower pixel shape
SWIFT_CLASS_NAMED("Flower")
@interface QRCodePixelShapeFlower : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// The fractional inset for the pixel
@property (nonatomic, readonly) CGFloat insetFraction;
/// Create
/// \param insetFraction The inset between each pixel
///
/// \param useRandomInset If true, chooses a random inset value (between 0.0 -> <code>insetFraction</code>) for each pixel
///
/// \param rotationFraction A rotation factor (0 -> 1) to apply to the rotation of each pixel
///
/// \param useRandomRotation If true, randomly sets the rotation of each pixel within the range <code>0 ... rotationFraction</code>
///
- (nonnull instancetype)initWithInsetFraction:(CGFloat)insetFraction useRandomInset:(BOOL)useRandomInset rotationFraction:(CGFloat)rotationFraction useRandomRotation:(BOOL)useRandomRotation OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShapeFlower (SWIFT_EXTENSION(QRCode))
/// Returns true if the shape supports setting a value for the specified key, false otherwise
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the current settings for the shape
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("Horizontal")
@interface QRCodePixelShapeHorizontal : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Create a generator with a specified inset fraction and corner radius fraction
- (nonnull instancetype)initWithInsetFraction:(CGFloat)insetFraction cornerRadiusFraction:(CGFloat)cornerRadiusFraction OBJC_DESIGNATED_INITIALIZER;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShapeHorizontal (SWIFT_EXTENSION(QRCode))
/// Does the shape generator support setting values for a particular key?
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns a storable representation of the shape handler
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeFillStyleImage (SWIFT_EXTENSION(QRCode))
- (SVGDefinition * _Nullable)svgRepresentationWithStyleIdentifier:(NSString * _Nonnull)styleIdentifier SWIFT_WARN_UNUSED_RESULT;
@end




@interface QRCodeFillStyleLinearGradient (SWIFT_EXTENSION(QRCode))
- (SVGDefinition * _Nullable)svgRepresentationWithStyleIdentifier:(NSString * _Nonnull)styleIdentifier SWIFT_WARN_UNUSED_RESULT;
@end



/// A QRCode logo template
SWIFT_CLASS_NAMED("LogoTemplate")
@interface QRCodeLogoTemplate : NSObject
/// A CGPath with the bounds x=0, y=0, width=1, height=1 in which to draw the image
@property (nonatomic) CGPathRef _Nonnull path;
/// The image to display.
/// If no image is provided, the mask is still applied to the QR code when generating.
@property (nonatomic, readonly) CGImageRef _Nonnull image;
/// An image to use as a mask for the logo.
@property (nonatomic, readonly) CGImageRef _Nullable maskImage;
/// If true, removes pixels under the drawn image
@property (nonatomic, readonly) BOOL masksQRCodePixels;
/// Create a logo using an image and a drawing path
/// \param image The image to display in the logo
///
/// \param path The bounds path for the logo (0,0 -> 1, 1) within the QR code
///
/// \param inset The inset from the path bounds to draw the image
///
/// \param masksQRCodePixels If true, removes pixels underneath the drawn image
///
- (nonnull instancetype)initWithImage:(CGImageRef _Nonnull)image path:(CGPathRef _Nonnull)path inset:(CGFloat)inset masksQRCodePixels:(BOOL)masksQRCodePixels OBJC_DESIGNATED_INITIALIZER;
/// Create a logo using an image and a drawing path
/// \param image The logo image to display
///
/// \param maskImage The mask to apply when drawing the image
///
/// \param masksQRCodePixels If true, removes pixels underneath the drawn image
///
- (nonnull instancetype)initWithImage:(CGImageRef _Nonnull)image maskImage:(CGImageRef _Nullable)maskImage masksQRCodePixels:(BOOL)masksQRCodePixels OBJC_DESIGNATED_INITIALIZER;
/// Create a LogoTemplate from a dictionary of settings
- (nullable instancetype)initWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeLogoTemplate (SWIFT_EXTENSION(QRCode))
/// Generate a pre-built circle logo template in the center of the qr code
+ (QRCodeLogoTemplate * _Nonnull)CircleCenterWithImage:(CGImageRef _Nonnull)image inset:(CGFloat)inset SWIFT_WARN_UNUSED_RESULT;
/// Generate a pre-built circle logo template in the bottom-right of the qr code
+ (QRCodeLogoTemplate * _Nonnull)CircleBottomRightWithImage:(CGImageRef _Nonnull)image inset:(CGFloat)inset SWIFT_WARN_UNUSED_RESULT;
/// Generate a pre-built square logo template in the center of the qr code
+ (QRCodeLogoTemplate * _Nonnull)SquareCenterWithImage:(CGImageRef _Nonnull)image inset:(CGFloat)inset SWIFT_WARN_UNUSED_RESULT;
/// Generate a pre-built square logo template in the bottom-right of the qr code
+ (QRCodeLogoTemplate * _Nonnull)SquareBottomRightWithImage:(CGImageRef _Nonnull)image inset:(CGFloat)inset SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeLogoTemplate (SWIFT_EXTENSION(QRCode))
/// Returns the logo path scaled to fit the specified dimension value
/// \param dimension The dimension for the returned path
///
/// \param flipped If true, flips the returned path
///
///
/// returns:
/// The scaled path
- (CGPathRef _Nonnull)absolutePathForMaskPathWithDimension:(CGFloat)dimension flipped:(BOOL)flipped SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the logo template
- (QRCodeLogoTemplate * _Nonnull)copyLogoTemplate SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of this logo template using the specified image
- (QRCodeLogoTemplate * _Nonnull)copyWithImage:(CGImageRef _Nonnull)image :(CGImageRef _Nullable)maskImage SWIFT_WARN_UNUSED_RESULT;
/// Return a dictionary representation of the logo template
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Create a LogoTemplate from a dictionary of settings
+ (QRCodeLogoTemplate * _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("Message")
@interface QRCodeMessage : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodeMessage (SWIFT_EXTENSION(QRCode))
@end


/// Protocol for generating data from a formatted QR Code message
SWIFT_PROTOCOL("_TtP6QRCode22QRCodeMessageFormatter_")
@protocol QRCodeMessageFormatter
/// Must be supplied in order to get the message’s formatted data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@end


/// Simple data
SWIFT_CLASS_NAMED("Data")
@interface QRCodeMessageData : NSObject <QRCodeMessageFormatter>
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
- (nonnull instancetype)init:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeMessage (SWIFT_EXTENSION(QRCode))
@end

@class NSURL;

/// A formattter for a generating a QRCode with a url (link)
SWIFT_CLASS_NAMED("Link")
@interface QRCodeMessageLink : NSObject <QRCodeMessageFormatter>
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Create using a url
- (nonnull instancetype)init:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
/// Create using the string representation of a URL
- (nullable instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeMessage (SWIFT_EXTENSION(QRCode))
@end


/// A formattter for a generating a QRCode containing a link for generating an email
SWIFT_CLASS_NAMED("Mail")
@interface QRCodeMessageMail : NSObject <QRCodeMessageFormatter>
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
- (nullable instancetype)initWithMailTo:(NSString * _Nonnull)mailTo subject:(NSString * _Nullable)subject body:(NSString * _Nullable)body OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeMessage (SWIFT_EXTENSION(QRCode))
@end


/// A formattter for a generating a QRCode with a telephone number
SWIFT_CLASS_NAMED("Phone")
@interface QRCodeMessagePhone : NSObject <QRCodeMessageFormatter>
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
- (nonnull instancetype)init:(NSString * _Nonnull)phoneNumber OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeMessage (SWIFT_EXTENSION(QRCode))
@end


/// A formattter for a generating a QRCode with an SMS
/// SMSTO:+401274159:This is the message
SWIFT_CLASS_NAMED("SMS")
@interface QRCodeMessageSMS : NSObject <QRCodeMessageFormatter>
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
- (nonnull instancetype)init:(NSString * _Nonnull)mobileNumber message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeMessage (SWIFT_EXTENSION(QRCode))
@end


/// A simple text formatter.
SWIFT_CLASS_NAMED("Text")
@interface QRCodeMessageText : NSObject <QRCodeMessageFormatter>
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
- (nullable instancetype)init:(NSString * _Nonnull)content OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeMessage (SWIFT_EXTENSION(QRCode))
@end

@class QRCodeMessageContactName;
@class QRCodeMessageContactAddress;

/// A formattter for a generating a QRCode with a VCard attached
/// https://www.evenx.com/vcard-3-0-format-specification
SWIFT_CLASS_NAMED("Contact")
@interface QRCodeMessageContact : NSObject <QRCodeMessageFormatter>
/// The VCard encoding
@property (nonatomic, readonly, copy) NSString * _Nonnull vcard;
/// The VCard utf8 data encoding
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Create a QR Code that contains a VCard
/// \param name The name to be used for the card
///
/// \param formattedName The name as it is to be displayed
///
/// \param addresses User’s addresses
///
/// \param organization User’s organization
///
/// \param title Job title, functional position or function
///
/// \param telephone An array of phone numbers. Format is (+)number, eg. +61000000000
///
/// \param email An array of email addresses (simple text, not validated)
///
/// \param urls Associated URLs
///
/// \param notes Some text to be attached to the card
///
- (nullable instancetype)initWithName:(QRCodeMessageContactName * _Nonnull)name formattedName:(NSString * _Nonnull)formattedName addresses:(NSArray<QRCodeMessageContactAddress *> * _Nonnull)addresses organization:(NSString * _Nullable)organization title:(NSString * _Nullable)title telephone:(NSArray<NSString *> * _Nonnull)telephone email:(NSArray<NSString *> * _Nonnull)email urls:(NSArray<NSURL *> * _Nonnull)urls notes:(NSArray<NSString *> * _Nonnull)notes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Name")
@interface QRCodeMessageContactName : NSObject
- (nonnull instancetype)initWithLastName:(NSString * _Nullable)lastName firstName:(NSString * _Nullable)firstName additionalName:(NSString * _Nullable)additionalName namePrefix:(NSString * _Nullable)namePrefix nameSuffix:(NSString * _Nullable)nameSuffix OBJC_DESIGNATED_INITIALIZER;
/// VCard encoding for a contact name
/// name (semicolon separated: LASTNAME; FIRSTNAME; ADDITIONAL NAME; NAME PREFIX(Mr.,Mrs.); NAME SUFFIX) (*required)
@property (nonatomic, readonly, copy) NSString * _Nonnull vcard;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Address")
@interface QRCodeMessageContactAddress : NSObject
/// Create an address for a VCARD style QR Code
/// \param type The type of address represented (dom(domestic), intl(international), postal, parcel, home, work)
///
/// \param postOfficeAddress Post Office Address
///
/// \param extendedAddress Extended Address
///
/// \param street Street (eg. 123 Main Street)
///
/// \param locality Locality (eg. San Francisco)
///
/// \param region The region specifier (eg. CA)
///
/// \param postalCode Post code (eg. 91921)
///
/// \param country Country (eg. USA)
///
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type postOfficeAddress:(NSString * _Nullable)postOfficeAddress extendedAddress:(NSString * _Nullable)extendedAddress street:(NSString * _Nullable)street locality:(NSString * _Nullable)locality region:(NSString * _Nullable)region postalCode:(NSString * _Nullable)postalCode country:(NSString * _Nullable)country OBJC_DESIGNATED_INITIALIZER;
/// VCard encoding for an address
@property (nonatomic, readonly, copy) NSString * _Nonnull vcard;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







/// The shape of the data within the qr code.
SWIFT_CLASS_NAMED("PixelShape")
@interface QRCodePixelShape : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


SWIFT_CLASS_NAMED("RoundedEndIndent")
@interface QRCodePixelShapeRoundedEndIndent : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// The corner radius fraction (0 … 1)
@property (nonatomic) CGFloat cornerRadiusFraction;
/// Do we draw the inner corners when drawing path?
@property (nonatomic) BOOL hasInnerCorners;
/// Create
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction hasInnerCorners:(BOOL)hasInnerCorners OBJC_DESIGNATED_INITIALIZER;
/// Make a copy of the shape
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


/// A sharp pixel shape
SWIFT_CLASS_NAMED("Sharp")
@interface QRCodePixelShapeSharp : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// The fractional inset for the pixel
@property (nonatomic, readonly) CGFloat insetFraction;
/// Create
/// \param insetFraction The inset between each pixel
///
/// \param useRandomInset If true, chooses a random inset value (between 0.0 -> <code>insetFraction</code>) for each pixel
///
/// \param rotationFraction A rotation factor (0 -> 1) to apply to the rotation of each pixel
///
/// \param useRandomRotation If true, randomly sets the rotation of each pixel within the range <code>0 ... rotationFraction</code>
///
- (nonnull instancetype)initWithInsetFraction:(CGFloat)insetFraction useRandomInset:(BOOL)useRandomInset rotationFraction:(CGFloat)rotationFraction useRandomRotation:(BOOL)useRandomRotation OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


/// A star pixel shape
SWIFT_CLASS_NAMED("Star")
@interface QRCodePixelShapeStar : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// The fractional inset for the pixel
@property (nonatomic, readonly) CGFloat insetFraction;
/// Create
/// \param insetFraction The inset between each pixel
///
/// \param useRandomInset If true, chooses a random inset value (between 0.0 -> <code>insetFraction</code>) for each pixel
///
/// \param rotationFraction A rotation factor (0 -> 1) to apply to the rotation of each pixel
///
/// \param useRandomRotation If true, randomly sets the rotation of each pixel within the range <code>0 ... rotationFraction</code>
///
- (nonnull instancetype)initWithInsetFraction:(CGFloat)insetFraction useRandomInset:(BOOL)useRandomInset rotationFraction:(CGFloat)rotationFraction useRandomRotation:(BOOL)useRandomRotation OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


SWIFT_CLASS_NAMED("Pointy")
@interface QRCodePixelShapePointy : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


/// A squircle pixel shape
SWIFT_CLASS_NAMED("Squircle")
@interface QRCodePixelShapeSquircle : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create
/// \param insetFraction The inset between each pixel
///
/// \param useRandomInset If true, randomly sets the inset of each pixel within the range <code>0 ... insetFraction</code>
///
/// \param rotationFraction A rotation factor (0 -> 1) to apply to the rotation of each pixel
///
/// \param useRandomRotation If true, randomly sets the rotation of each pixel within the range <code>0 ... rotationFraction</code>
///
- (nonnull instancetype)initWithInsetFraction:(CGFloat)insetFraction useRandomInset:(BOOL)useRandomInset rotationFraction:(CGFloat)rotationFraction useRandomRotation:(BOOL)useRandomRotation OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// The fractional inset for the pixel
@property (nonatomic, readonly) CGFloat insetFraction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


/// A square pixel shape
SWIFT_CLASS_NAMED("Square")
@interface QRCodePixelShapeSquare : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create
/// \param insetFraction The inset between each pixel
///
/// \param useRandomInset If true, chooses a random inset value (between 0.0 -> <code>insetFraction</code>) for each pixel
///
/// \param rotationFraction A rotation factor (0 -> 1) to apply to the rotation of each pixel
///
/// \param useRandomRotation If true, randomly sets the rotation of each pixel within the range <code>0 ... rotationFraction</code>
///
- (nonnull instancetype)initWithInsetFraction:(CGFloat)insetFraction useRandomInset:(BOOL)useRandomInset rotationFraction:(CGFloat)rotationFraction useRandomRotation:(BOOL)useRandomRotation OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of this shape
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// The fractional inset for the pixel
@property (nonatomic, readonly) CGFloat insetFraction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


/// A star pixel shape
SWIFT_CLASS_NAMED("Shiny")
@interface QRCodePixelShapeShiny : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


SWIFT_CLASS_NAMED("Vertical")
@interface QRCodePixelShapeVertical : NSObject <QRCodePixelShapeGenerator>
/// The generators name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Create a generator with a specified inset fraction and corner radius fraction
- (nonnull instancetype)initWithInsetFraction:(CGFloat)insetFraction cornerRadiusFraction:(CGFloat)cornerRadiusFraction OBJC_DESIGNATED_INITIALIZER;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


/// A rounded rect pixel shape
SWIFT_CLASS_NAMED("RoundedRect")
@interface QRCodePixelShapeRoundedRect : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create
/// \param cornerRadiusFraction The corner radius (0.0 -> 1.0)
///
/// \param insetFraction The inset between each pixel
///
/// \param useRandomInset If true, chooses a random inset value (between 0.0 -> <code>insetFraction</code>) for each pixel
///
/// \param rotationFraction A rotation factor (0 -> 1) to apply to the rotation of each pixel
///
/// \param useRandomRotation If true, randomly sets the rotation of each pixel within the range <code>0 ... rotationFraction</code>
///
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction insetFraction:(CGFloat)insetFraction useRandomInset:(BOOL)useRandomInset rotationFraction:(CGFloat)rotationFraction useRandomRotation:(BOOL)useRandomRotation OBJC_DESIGNATED_INITIALIZER;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// The fractional corner radius for the pixel
@property (nonatomic, readonly) CGFloat cornerRadiusFraction;
/// The fractional inset for the pixel
@property (nonatomic, readonly) CGFloat insetFraction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end



@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end



@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end



@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end


SWIFT_CLASS_NAMED("RoundedPath")
@interface QRCodePixelShapeRoundedPath : NSObject <QRCodePixelShapeGenerator>
/// The generator name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of this path generator with the specified settings
+ (id <QRCodePixelShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// The corner radius fraction (0 … 1)
@property (nonatomic) CGFloat cornerRadiusFraction;
/// Do we draw the inner corners when drawing path?
@property (nonatomic) BOOL hasInnerCorners;
/// Create
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction hasInnerCorners:(BOOL)hasInnerCorners OBJC_DESIGNATED_INITIALIZER;
/// Make a copy of the shape
- (id <QRCodePixelShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePixelShape (SWIFT_EXTENSION(QRCode))
@end



@interface QRCodePixelShapePointy (SWIFT_EXTENSION(QRCode))
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePixelShapePointy (SWIFT_EXTENSION(QRCode))
/// Does the shape generator support setting values for a particular key?
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns a storable representation of the shape handler
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


/// The shape of an ‘eye’ within the qr code
SWIFT_CLASS_NAMED("PupilShape")
@interface QRCodePupilShape : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


SWIFT_PROTOCOL("_TtP6QRCode25QRCodePupilShapeGenerator_")
@protocol QRCodePupilShapeGenerator
/// The unique name for identifying the pupil shape
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The user-facing title for the generator
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
/// Create a pupil shape generator using the provided settings
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Does the shape generator support setting values for a particular key?
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


/// A ‘squircle’ pupil style
SWIFT_CLASS_NAMED("Squircle")
@interface QRCodePupilShapeSquircle : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘square’ style pupil design
SWIFT_CLASS_NAMED("Square")
@interface QRCodePupilShapeSquare : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘shield’ style pupil design with configurable corner styles
SWIFT_CLASS_NAMED("Shield")
@interface QRCodePupilShapeShield : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Create a Shield pupil shape compatible with objective-c
- (nonnull instancetype)initWithTopLeft:(BOOL)topLeft topRight:(BOOL)topRight bottomLeft:(BOOL)bottomLeft bottomRight:(BOOL)bottomRight OBJC_DESIGNATED_INITIALIZER;
/// Create a shield pupil shape using the provided settings
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘rounded rect’ style pupil design
SWIFT_CLASS_NAMED("RoundedRect")
@interface QRCodePupilShapeRoundedRect : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘rounded rect with a pointy bit facing inwards’ style pupil design
SWIFT_CLASS_NAMED("RoundedPointingOut")
@interface QRCodePupilShapeRoundedPointingOut : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘rounded rect with a pointy bit facing inwards’ style pupil design
SWIFT_CLASS_NAMED("RoundedPointingIn")
@interface QRCodePupilShapeRoundedPointingIn : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘square with a rounded outer corner’ style pupil design
SWIFT_CLASS_NAMED("RoundedOuter")
@interface QRCodePupilShapeRoundedOuter : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘square’ style pupil design
SWIFT_CLASS_NAMED("Pixels")
@interface QRCodePupilShapePixels : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGFloat cornerRadiusFraction;
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction OBJC_DESIGNATED_INITIALIZER;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘leaf’ style pupil design
SWIFT_CLASS_NAMED("Leaf")
@interface QRCodePupilShapeLeaf : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘rounded rect’ style pupil design
SWIFT_CLASS_NAMED("Edges")
@interface QRCodePupilShapeEdges : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// The fractional corner radius (0 … 1) for the edge bars
@property (nonatomic) CGFloat cornerRadiusFraction;
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction OBJC_DESIGNATED_INITIALIZER;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A circle style pupil design
SWIFT_CLASS_NAMED("Circle")
@interface QRCodePupilShapeCircle : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A vertical bars style pupil design
SWIFT_CLASS_NAMED("BarsVertical")
@interface QRCodePupilShapeBarsVertical : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A horizontal bars style pupil design
SWIFT_CLASS_NAMED("BarsHorizontal")
@interface QRCodePupilShapeBarsHorizontal : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCodePupilShape (SWIFT_EXTENSION(QRCode))
@end


/// A ‘square’ style pupil design
SWIFT_CLASS_NAMED("CorneredPixels")
@interface QRCodePupilShapeCorneredPixels : NSObject <QRCodePupilShapeGenerator>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Name;)
+ (NSString * _Nonnull)Name SWIFT_WARN_UNUSED_RESULT;
/// The generator title
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Title;)
+ (NSString * _Nonnull)Title SWIFT_WARN_UNUSED_RESULT;
+ (id <QRCodePupilShapeGenerator> _Nonnull)Create:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Make a copy of the object
- (id <QRCodePupilShapeGenerator> _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGFloat cornerRadiusFraction;
- (nonnull instancetype)initWithCornerRadiusFraction:(CGFloat)cornerRadiusFraction OBJC_DESIGNATED_INITIALIZER;
/// The pupil centered in the 90x90 square
- (CGPathRef _Nonnull)pupilPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A QRCode generator class.
/// Note that while this can be used on any thread, it is not in itself thread-safe.
SWIFT_CLASS("_TtC6QRCode6QRCode")
@interface QRCode : NSObject
/// The generator to use when generating the QR code.
@property (nonatomic, strong) id <QRCodeEngine> _Nonnull generator;
/// Create a blank QRCode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Create a blank QRCode with a custom QR code generation engine
- (nonnull instancetype)initWithGenerator:(id <QRCodeEngine> _Nonnull)generator OBJC_DESIGNATED_INITIALIZER;
/// Create a QRCode with the given data and error correction
/// \param data The initial data to display
///
/// \param errorCorrection The initial error correction to use
///
/// \param generator The QR engine to use. Specify nil to use the default generator.
///
- (nonnull instancetype)init:(NSData * _Nonnull)data errorCorrection:(enum QRCodeErrorCorrection)errorCorrection generator:(id <QRCodeEngine> _Nullable)generator OBJC_DESIGNATED_INITIALIZER;
/// Create a QRCode with the given text and error correction
- (nonnull instancetype)initWithUtf8String:(NSString * _Nonnull)utf8String errorCorrection:(enum QRCodeErrorCorrection)errorCorrection generator:(id <QRCodeEngine> _Nullable)generator OBJC_DESIGNATED_INITIALIZER;
/// Create a QRCode with the given message and error correction
- (nonnull instancetype)initWithMessage:(id <QRCodeMessageFormatter> _Nonnull)message errorCorrection:(enum QRCodeErrorCorrection)errorCorrection generator:(id <QRCodeEngine> _Nullable)generator OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
@end

/// The error correction level
typedef SWIFT_ENUM_NAMED(NSInteger, QRCodeErrorCorrection, "ErrorCorrection", closed) {
/// Lowest error correction (L - Recovers 7% of data)
  QRCodeErrorCorrectionLow = 0,
/// Medium error correction (M - Recovers 15% of data)
  QRCodeErrorCorrectionMedium = 1,
/// Quantize error correction (Q - Recovers 25% of data)
  QRCodeErrorCorrectionQuantize = 2,
/// High error correction (H - Recovers 30% of data)
  QRCodeErrorCorrectionHigh = 3,
};



@interface QRCode (SWIFT_EXTENSION(QRCode))
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
@end


/// Represents the style when drawing the qr code
SWIFT_CLASS_NAMED("Style")
@interface QRCodeStyle : NSObject
/// Convenience initializer for objc
+ (QRCodeStyle * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
/// Set the foreground color for all the components of the qr code
- (void)setForegroundStyle:(id <QRCodeFillStyleGenerator> _Nonnull)style;
/// The style for the data component for the QR code. Defaults to black
@property (nonatomic, strong) id <QRCodeFillStyleGenerator> _Nonnull onPixels;
/// The background color for the ‘on’ pixels
@property (nonatomic) CGColorRef _Nullable onPixelsBackground;
/// The style for drawing the non-drawn sections for the qr code.
@property (nonatomic, strong) id <QRCodeFillStyleGenerator> _Nullable offPixels;
/// The background color for the ‘off’ pixels
@property (nonatomic) CGColorRef _Nullable offPixelsBackground;
/// The border around the eye. By default, this is the same color as the data
@property (nonatomic, strong) id <QRCodeFillStyleGenerator> _Nullable eye;
/// The pupil of the eye. By default, this is the same color as the eye, and failing that the data
@property (nonatomic, strong) id <QRCodeFillStyleGenerator> _Nullable pupil;
/// The background style for the QR code. If nil, no background is drawn. Defaults to white
@property (nonatomic, strong) id <QRCodeFillStyleGenerator> _Nullable background;
/// A corner radius (in qr pixels) to apply to the background fill
@property (nonatomic) CGFloat backgroundFractionalCornerRadius;
/// The background color behind the eyes.
/// Setting a solid background color (eg. white) behind the eyes can make the QR code more readable
@property (nonatomic) CGColorRef _Nullable eyeBackground;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CIQRCodeFeature;

@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Detect QR code(s) in the specified image
/// Note: If the QR code contains raw data (ie. not a string) CoreImage has no mechanism to extract raw data.
/// \param image The image in which to detect QRCodes
///
///
/// returns:
/// An array of detected QR Codes
+ (NSArray<CIQRCodeFeature *> * _Nullable)DetectQRCodesIn:(NSImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
@end


/// Represents the shape when generating the qr code
SWIFT_CLASS_NAMED("Shape")
@interface QRCodeShape : NSObject
/// Convenience initializer for objc
+ (QRCodeShape * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
/// The shape of the ‘on’ pixels. Defaults to simple square ‘pixels’
@property (nonatomic, strong) id <QRCodePixelShapeGenerator> _Nonnull onPixels;
/// The shape for drawing the non-drawn sections of the qr code.
@property (nonatomic, strong) id <QRCodePixelShapeGenerator> _Nullable offPixels;
/// If set, the QR code draws the cells that AREN’T set within the QR code using the
/// <code>onPixel</code> generator and style. All other styles (offPixels, eye, pupil) are ignored.
/// A negative path shape is filled using the ‘onPixels’ style
@property (nonatomic) BOOL negatedOnPixelsOnly;
/// The style of eyes to display
/// Defaults to a simple square eye
@property (nonatomic, strong) id <QRCodeEyeShapeGenerator> _Nonnull eye;
/// The shape of the pupil. If nil, uses the default pupil shape as defined by the eye
@property (nonatomic, strong) id <QRCodePupilShapeGenerator> _Nullable pupil;
/// Make a copy of the content shape
- (QRCodeShape * _Nonnull)copyShape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Returns an NSImage representation of the qr code using the specified style
/// \param size The pixel size of the image to generate
///
/// \param dpi The dpi for the resulting image
///
/// \param design The design for the qr code
///
///
/// returns:
/// The image, or nil if an error occurred
- (NSImage * _Nullable)nsImage:(CGSize)size dpi:(CGFloat)dpi design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Create a default engine for the platform
+ (id <QRCodeEngine> _Nonnull)DefaultEngine SWIFT_WARN_UNUSED_RESULT;
@end




@interface QRCode (SWIFT_EXTENSION(QRCode))
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
@end


/// Constant Keys
SWIFT_CLASS("_TtCC6QRCode6QRCode11SettingsKey")
@interface SettingsKey : NSObject
/// Settings key for ‘corner radius fraction’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cornerRadiusFraction;)
+ (NSString * _Nonnull)cornerRadiusFraction SWIFT_WARN_UNUSED_RESULT;
/// Settings key for ‘insetFraction’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull insetFraction;)
+ (NSString * _Nonnull)insetFraction SWIFT_WARN_UNUSED_RESULT;
/// Settings key for ‘has inner corners’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hasInnerCorners;)
+ (NSString * _Nonnull)hasInnerCorners SWIFT_WARN_UNUSED_RESULT;
/// Setings key for ‘random inset’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull useRandomInset;)
+ (NSString * _Nonnull)useRandomInset SWIFT_WARN_UNUSED_RESULT;
/// A rotation angle (0 -> 1)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rotationFraction;)
+ (NSString * _Nonnull)rotationFraction SWIFT_WARN_UNUSED_RESULT;
/// Setings key for ‘random rotation’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull useRandomRotation;)
+ (NSString * _Nonnull)useRandomRotation SWIFT_WARN_UNUSED_RESULT;
/// Settings key for ‘corners’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull corners;)
+ (NSString * _Nonnull)corners SWIFT_WARN_UNUSED_RESULT;
/// Settings key for ‘additionalQuietSpace’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull additionalQuietZonePixels;)
+ (NSString * _Nonnull)additionalQuietZonePixels SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Draw the current qrcode into the context using the specified style
- (void)drawWithCtx:(CGContextRef _Nonnull)ctx rect:(CGRect)rect design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode)) <NSCopying>
/// Return a copy of the QR Code
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Returns an pdf representation of the qr code using the specified style
/// \param size The page size of the generated PDF
///
/// \param pdfResolution The resolution of the pdf output
///
/// \param design The design to use when generating the pdf output
///
///
/// returns:
/// A data object containing the PDF representation of the QR code
- (NSData * _Nullable)pdfDataWithDimension:(NSInteger)dimension pdfResolution:(CGFloat)pdfResolution design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate SWIFT_WARN_UNUSED_RESULT;
/// Returns an pdf representation of the qr code using the specified style
/// \param size The page size of the generated PDF
///
/// \param pdfResolution The resolution of the pdf output
///
/// \param design The design to use when generating the pdf output
///
/// \param logoTemplate The logo template to apply to the qr code
///
///
/// returns:
/// A data object containing the PDF representation of the QR code
- (NSData * _Nullable)pdfData:(CGSize)size pdfResolution:(CGFloat)pdfResolution design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Returns a string of SVG code for an image depicting this QR Code, with the given number of border modules.
/// The string always uses Unix newlines (\n), regardless of the platform.
/// \param dimension The dimension of the output svg
///
/// \param design The design for the QR Code
///
/// \param logoTemplate The logo template to use when generating the svg data
///
///
/// returns:
/// An SVG representation of the QR code
- (NSString * _Nonnull)svgWithDimension:(NSInteger)dimension design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate SWIFT_WARN_UNUSED_RESULT;
/// Returns utf8-encoded SVG data for this qr code
/// The string always uses Unix newlines (\n), regardless of the platform.
/// \param dimension The dimension of the output svg
///
/// \param design The design for the QR Code
///
/// \param logoTemplate The logo template to use when generating the svg data
///
///
/// returns:
/// An SVG representation of the QR code
- (NSData * _Nullable)svgDataWithDimension:(NSInteger)dimension design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Return a JPEG representation of the QR code
/// \param dimension The dimensions of the image to create
///
/// \param dpi The dpi for the resulting images
///
/// \param design The design for the QR Code
///
/// \param logoTemplate The logo template to apply to the qr code
///
/// \param compression The compression level when generating the JPEG file (0.0 … 1.0)
///
///
/// returns:
/// The JPEG data
- (NSData * _Nullable)jpegDataWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate compression:(double)compression SWIFT_WARN_UNUSED_RESULT;
/// Return a JPEG representation of the QR code
/// \param size The dimensions of the image to create
///
/// \param dpi The dpi for the resulting images
///
/// \param design The design for the QR Code
///
/// \param logoTemplate The logo template to apply to the qr code
///
/// \param compression The compression level when generating the JPEG file (0.0 … 1.0)
///
///
/// returns:
/// The JPEG data
- (NSData * _Nullable)jpegData:(CGSize)size dpi:(CGFloat)dpi design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate compression:(double)compression SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Returns a CGImage representation of the qr code using the specified style
/// \param dimension The dimension of the image to generate
///
/// \param design The design for the qr code
///
///
/// returns:
/// The image, or nil if an error occurred
- (CGImageRef _Nullable)cgImageWithDimension:(NSInteger)dimension design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate SWIFT_WARN_UNUSED_RESULT;
/// Returns a CGImage representation of the qr code using the specified style
/// \param size The pixel size of the image to generate
///
/// \param design The design for the qr code
///
///
/// returns:
/// The image, or nil if an error occurred
- (CGImageRef _Nullable)cgImage:(CGSize)size design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Return a PNG representation of the QR code
/// \param dimension The dimensions of the image to create
///
/// \param dpi The dpi for the resulting images
///
/// \param design The design for the QR Code
///
/// \param logoTemplate The logo template to apply to the qr code
///
///
/// returns:
/// The PNG data
- (NSData * _Nullable)pngDataWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate SWIFT_WARN_UNUSED_RESULT;
/// Return a PNG representation of the QR code
/// \param size The size of the resulting image
///
/// \param dpi The dpi for the resulting images
///
/// \param design The design for the QR Code
///
/// \param logoTemplate The logo template to apply to the qr code
///
///
/// returns:
/// The PNG data
- (NSData * _Nullable)pngData:(CGSize)size dpi:(CGFloat)dpi design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Return a TIFF representation of the QR code
/// \param dimension The dimensions of the image to create
///
/// \param dpi The dpi for the resulting images
///
/// \param design The design for the QR Code
///
/// \param logoTemplate The logo template to apply to the qr code
///
/// \param compression The compression level when generating the image (0.0 … 1.0)
///
///
/// returns:
/// The TIFF data
- (NSData * _Nullable)tiffDataWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate compression:(double)compression SWIFT_WARN_UNUSED_RESULT;
/// Return a TIFF representation of the QR code
/// \param size The size of the resulting image
///
/// \param dpi The dpi for the resultant image
///
/// \param design The design for the QR Code
///
/// \param logoTemplate The logo template to apply to the qr code
///
/// \param compression The compression level when generating the image (0.0 … 1.0)
///
///
/// returns:
/// The TIFF data
- (NSData * _Nullable)tiffData:(CGSize)size dpi:(CGFloat)dpi design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate compression:(double)compression SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Generate a path containing the QR Code components
/// \param size The dimensions of the generated path
///
/// \param components The components of the QR code to include in the path
///
/// \param shape The shape definitions for genering the path components
///
/// \param logoTemplate The definition for the logo
///
/// \param additionalQuietSpace Additional spacing around the outside of the QR code
///
///
/// returns:
/// A path containing the components
- (CGPathRef _Nonnull)path:(CGSize)size components:(QRCodeComponents * _Nonnull)components shape:(QRCodeShape * _Nonnull)shape logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate additionalQuietSpace:(CGFloat)additionalQuietSpace SWIFT_WARN_UNUSED_RESULT;
@end


/// The components of the QR code
SWIFT_CLASS_NAMED("Components")
@interface QRCodeComponents : NSObject
- (nonnull instancetype)initWithRawValue:(int8_t)rawValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Return an ASCII representation of the QR code using the extended ASCII code set
/// Only makes sense if presented using a fixed-width font
- (NSString * _Nonnull)asciiRepresentation SWIFT_WARN_UNUSED_RESULT;
/// Returns an small ASCII representation of the QR code (about 1/2 the regular size) using the extended ASCII code set
/// Only makes sense if presented using a fixed-width font
- (NSString * _Nonnull)smallAsciiRepresentation SWIFT_WARN_UNUSED_RESULT;
@end



@interface QRCode (SWIFT_EXTENSION(QRCode))
/// This is the number of cells along any edge of the qr code
@property (nonatomic, readonly) NSInteger cellDimension;
/// The dimension for an individual cell for the given image dimension
- (CGFloat)cellSizeForImageDimension:(NSInteger)dimension SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Add QRCode representations to the specified pasteboard
/// \param dimension The dimensions of the image to create
///
/// \param pasteboard The pasteboard to receive the representations
///
/// \param dpi The DPI for the image added to the pasteboard
///
- (void)addToPasteboardWithDimension:(NSInteger)dimension dpi:(CGFloat)dpi design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate pasteboard:(NSPasteboard * _Nonnull)pasteboard;
/// Add QRCode representations to the specified pasteboard
/// \param size The size of the QRCode to generate
///
/// \param scale The scale (eg. scale=2 -> retina -> 144dpi)
///
/// \param design The design for the QR code
///
/// \param logoTemplate The logo to overlay on the qr code
///
/// \param pasteboard The pasteboard to receive the representations
///
- (void)addToPasteboard:(CGSize)size dpi:(CGFloat)dpi design:(QRCodeDesign * _Nonnull)design logoTemplate:(QRCodeLogoTemplate * _Nullable)logoTemplate pasteboard:(NSPasteboard * _Nonnull)pasteboard;
@end

enum QRCodeDetectionAccuracy : NSInteger;

@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Detect QR code(s) in the specified image using CoreImage
/// Note: If the QR code contains raw data (ie. not a string) CoreImage has no mechanism to extract raw data.
/// \param cgImage The image in which to detect QRCodes
///
/// \param accuracy The accuracy to use when detecting codes. <code>.low</code> is faster, but less accurate.
///
///
/// returns:
/// An array of detected QR Codes
+ (NSArray<CIQRCodeFeature *> * _Nonnull)DetectQRCodes:(CGImageRef _Nonnull)cgImage accuracy:(enum QRCodeDetectionAccuracy)accuracy SWIFT_WARN_UNUSED_RESULT;
/// Detect QR coded strings in the specified image using CoreImage
/// Note: If the QR code contains raw data (ie. not a string) CoreImage has no mechanism to extract raw data.
/// \param cgImage The image in which to detect QRCodes
///
/// \param accuracy The accuracy to use when detecting codes. <code>.low</code> is faster, but less accurate.
///
///
/// returns:
/// An array of detected qrcode-encoded strings within the image
+ (NSArray<NSString *> * _Nonnull)DetectQRStrings:(CGImageRef _Nonnull)cgImage accuracy:(enum QRCodeDetectionAccuracy)accuracy SWIFT_WARN_UNUSED_RESULT;
@end

/// QRCode detection accuracy
typedef SWIFT_ENUM_NAMED(NSInteger, QRCodeDetectionAccuracy, "DetectionAccuracy", closed) {
/// Faster but less accurate
  QRCodeDetectionAccuracyLow = 0,
/// Slower but more accurate
  QRCodeDetectionAccuracyHigh = 1,
};


@interface QRCode (SWIFT_EXTENSION(QRCode))
/// Build the QR Code using the given data and error correction
- (void)updateWithData:(NSData * _Nonnull)data errorCorrection:(enum QRCodeErrorCorrection)errorCorrection;
/// Build the QR Code using the given message formatter and error correction
- (void)updateWithMessage:(id <QRCodeMessageFormatter> _Nonnull)message errorCorrection:(enum QRCodeErrorCorrection)errorCorrection;
/// Build the QR Code using the given text and error correction
- (void)updateWithText:(NSString * _Nonnull)text errorCorrection:(enum QRCodeErrorCorrection)errorCorrection;
@end

@class NSCoder;

/// Very simple QRCode base view for displaying a document in an NSView
/// This view provides background loading functionality so if the QRCode document is complex,
/// a spinner will display until the content is ready.
SWIFT_CLASS("_TtC6QRCode18QRCodeDocumentView")
@interface QRCodeDocumentView : NSView
/// The document to display
@property (nonatomic, strong) IBOutlet QRCodeDocument * _Nullable document;
/// Create a document view
/// \param document The document to display
///
- (nonnull instancetype)initWithDocument:(QRCodeDocument * _Nonnull)document OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


@interface QRCodeDocumentView (SWIFT_EXTENSION(QRCode))
@property (nonatomic, readonly, getter=isFlipped) BOOL flipped;
@property (nonatomic, readonly, getter=isOpaque) BOOL opaque;
- (void)setFrameSize:(NSSize)newSize;
@end



/// A protocol for qr code generation
SWIFT_PROTOCOL("_TtP6QRCode12QRCodeEngine_")
@protocol QRCodeEngine
/// Generate QR Code matrix from the specified data
- (QRCodeBoolMatrix * _Nullable)generateWithData:(NSData * _Nonnull)data errorCorrection:(enum QRCodeErrorCorrection)errorCorrection SWIFT_WARN_UNUSED_RESULT;
/// Generate QR Code matrix from the specified string
- (QRCodeBoolMatrix * _Nullable)generateWithText:(NSString * _Nonnull)text errorCorrection:(enum QRCodeErrorCorrection)errorCorrection SWIFT_WARN_UNUSED_RESULT;
@end


/// An eye shape factory
SWIFT_CLASS("_TtC6QRCode21QRCodeEyeShapeFactory")
@interface QRCodeEyeShapeFactory : NSObject
/// A shared eye shape factory
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QRCodeEyeShapeFactory * _Nonnull shared;)
+ (QRCodeEyeShapeFactory * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Create
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull availableGeneratorNames;
/// Return a new instance of an eye shape generator with the specified name and optional settings
- (id <QRCodeEyeShapeGenerator> _Nullable)named:(NSString * _Nonnull)name settings:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Create an eye shape generator from the specified shape settings
- (id <QRCodeEyeShapeGenerator> _Nullable)createWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
@end






/// A qr code generator that uses QRCodeGenerator (https://github.com/dagronf/swift-qrcode-generator) as its generator.
/// This is primarily used for WatchOS, which doesn’t support CoreImage filters.
SWIFT_CLASS("_TtC6QRCode24QRCodeGenerator_External")
@interface QRCodeGenerator_External : NSObject <QRCodeEngine>
/// Create an engine
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Generate the QR code using the custom generator
- (QRCodeBoolMatrix * _Nullable)generateWithData:(NSData * _Nonnull)data errorCorrection:(enum QRCodeErrorCorrection)errorCorrection SWIFT_WARN_UNUSED_RESULT;
- (QRCodeBoolMatrix * _Nullable)generateWithText:(NSString * _Nonnull)text errorCorrection:(enum QRCodeErrorCorrection)errorCorrection SWIFT_WARN_UNUSED_RESULT;
@end




/// A data shape factory
SWIFT_CLASS("_TtC6QRCode23QRCodePixelShapeFactory")
@interface QRCodePixelShapeFactory : NSObject
/// Shared data shape factory
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QRCodePixelShapeFactory * _Nonnull shared;)
+ (QRCodePixelShapeFactory * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Create
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The available pixel shape generator names
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull availableGeneratorNames;
/// Return a new instance of the data shape generator with the specified name and optional settings
- (id <QRCodePixelShapeGenerator> _Nullable)named:(NSString * _Nonnull)name settings:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Create a data shape generator from the specified shape settings
- (id <QRCodePixelShapeGenerator> _Nullable)createWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePixelShapeFactory (SWIFT_EXTENSION(QRCode))
/// Generate an image of the data represented by a specific data generator for a fixed 5x5 data pixel representation
/// \param pixelGenerator The pixel generator to use
///
/// \param dimension The dimension of the image to output
///
/// \param foregroundColor The foreground color
///
/// \param backgroundColor The background color (optional)
///
/// \param samplePixelMatrix The matrix of pixels to draw in the result
///
/// \param isOn If true, draws the ‘on’ pixels in the qrcode, else draws the ‘off’ pixels
///
///
/// returns:
/// A CGImage representation of the data
- (CGImageRef _Nullable)imageWithPixelGenerator:(id <QRCodePixelShapeGenerator> _Nonnull)pixelGenerator dimension:(CGFloat)dimension foregroundColor:(CGColorRef _Nonnull)foregroundColor backgroundColor:(CGColorRef _Nullable)backgroundColor samplePixelMatrix:(QRCodeBoolMatrix * _Nullable)samplePixelMatrix isOn:(BOOL)isOn SWIFT_WARN_UNUSED_RESULT;
@end




/// An eye shape factory
SWIFT_CLASS("_TtC6QRCode23QRCodePupilShapeFactory")
@interface QRCodePupilShapeFactory : NSObject
/// A shared eye shape factory
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QRCodePupilShapeFactory * _Nonnull shared;)
+ (QRCodePupilShapeFactory * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Create
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull availableGeneratorNames;
/// Return a new instance of an eye shape generator with the specified name and optional settings
- (id <QRCodePupilShapeGenerator> _Nullable)named:(NSString * _Nonnull)name settings:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Create an eye shape generator from the specified shape settings
- (id <QRCodePupilShapeGenerator> _Nullable)createWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
@end





/// A simple NSView/UIView that displays a QR Code
IB_DESIGNABLE
SWIFT_CLASS("_TtC6QRCode10QRCodeView")
@interface QRCodeView : QRCodeDocumentView
/// The correction level to use when generating the QR code
@property (nonatomic) enum QRCodeErrorCorrection errorCorrection;
/// Binary data to display in the QR code
@property (nonatomic, copy) NSData * _Nonnull data;
/// The QRCode document represented for this view
@property (nonatomic, strong) QRCodeDocument * _Nullable document;
/// The style to use when drawing the qr code
@property (nonatomic, strong) QRCodeDesign * _Nonnull design;
@property (nonatomic, strong) QRCodeLogoTemplate * _Nullable logoTemplate;
/// Returns the number of cells for a dimension in the QR code is the pixel dimension for the QR Code.  You shouldn’t make the view smaller than this
@property (nonatomic, readonly) NSInteger cellDimension;
/// The dimension for an individual cell for the given image dimension
@property (nonatomic, readonly) CGFloat cellSize;
/// Create a QRCodeView with default settings
- (nonnull instancetype)init;
+ (nonnull instancetype)new;
/// Create a QRCodeView with an initial document.
/// Modifying values within this view will modify the content of the document
- (nonnull instancetype)initWithDocument:(QRCodeDocument * _Nonnull)document OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Text content to display in the QR code
- (BOOL)setString:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
@end


@class NSEvent;

@interface QRCodeView (SWIFT_EXTENSION(QRCode))
- (void)mouseDown:(NSEvent * _Nonnull)event;
@end

@class NSDraggingSession;

@interface QRCodeView (SWIFT_EXTENSION(QRCode)) <NSDraggingSource>
- (NSDragOperation)draggingSession:(NSDraggingSession * _Nonnull)_ sourceOperationMaskForDraggingContext:(NSDraggingContext)_ SWIFT_WARN_UNUSED_RESULT;
@end

@class NSPasteboardItem;

@interface QRCodeView (SWIFT_EXTENSION(QRCode)) <NSPasteboardItemDataProvider>
- (void)pasteboard:(NSPasteboard * _Nullable)pasteboard item:(NSPasteboardItem * _Nonnull)item provideDataForType:(NSPasteboardType _Nonnull)type;
@end

@class NSColor;

@interface QRCodeView (SWIFT_EXTENSION(QRCode))
/// The name of the shape generator for the eye
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibEyeShape;
/// The name of the shape generator for the data
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibPixelShape;
/// The name of the shape generator for the data
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibPupilShape;
/// Interface builder correction level
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibCorrectionLevel;
/// Interface builder text content
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibTextContent;
/// Interface builder data color
@property (nonatomic, strong) IBInspectable NSColor * _Nonnull ibPixelColor;
/// Interface builder eye color
@property (nonatomic, strong) IBInspectable NSColor * _Nonnull ibEyeColor;
/// Interface builder pupil color
@property (nonatomic, strong) IBInspectable NSColor * _Nonnull ibPupilColor;
/// Interface builder background color
@property (nonatomic, strong) IBInspectable NSColor * _Nonnull ibBackgroundColor;
- (void)prepareForInterfaceBuilder;
@end


SWIFT_CLASS("_TtC6QRCode14RGBAComponents")
@interface RGBAComponents : NSObject
@property (nonatomic, readonly) CGFloat r;
@property (nonatomic, readonly) CGFloat g;
@property (nonatomic, readonly) CGFloat b;
@property (nonatomic, readonly) CGFloat a;
- (nonnull instancetype)initWithR:(CGFloat)r g:(CGFloat)g b:(CGFloat)b a:(CGFloat)a OBJC_DESIGNATED_INITIALIZER;
/// Archive the color to an “r,g,b,a” string (eg. “1.0,0.0,0.0,0.5”)
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface QRCodeFillStyleRadialGradient (SWIFT_EXTENSION(QRCode))
- (SVGDefinition * _Nullable)svgRepresentationWithStyleIdentifier:(NSString * _Nonnull)styleIdentifier SWIFT_WARN_UNUSED_RESULT;
@end



@interface QRCodePixelShapeRoundedEndIndent (SWIFT_EXTENSION(QRCode))
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePixelShapeRoundedEndIndent (SWIFT_EXTENSION(QRCode))
/// Does the shape generator support setting values for a particular key?
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns a storable representation of the shape handler
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end




@interface QRCodePixelShapeRoundedPath (SWIFT_EXTENSION(QRCode))
/// Generate a CGPath from the matrix contents
/// \param matrix The matrix to generate
///
/// \param size The size of the resulting CGPath
///
///
/// returns:
/// A path
- (CGPathRef _Nonnull)generatePathFrom:(QRCodeBoolMatrix * _Nonnull)matrix size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePixelShapeRoundedPath (SWIFT_EXTENSION(QRCode))
/// Does the shape generator support setting values for a particular key?
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns a storable representation of the shape handler
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end




@interface QRCodePixelShapeRoundedRect (SWIFT_EXTENSION(QRCode))
/// Returns true if the shape supports setting a value for the specified key, false otherwise
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the current settings for the shape
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeShape (SWIFT_EXTENSION(QRCode))
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
+ (QRCodeShape * _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeShape (SWIFT_EXTENSION(QRCode))
/// Returns the actual shape that will be used when drawing.
/// If the pupil shape is <code>nil</code>, falls back to the eye shape
@property (nonatomic, readonly, strong) id <QRCodePupilShapeGenerator> _Nonnull actualPupilShape;
@end


@interface QRCodePixelShapeSharp (SWIFT_EXTENSION(QRCode))
/// Returns true if the shape supports setting a value for the specified key, false otherwise
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the current settings for the shape
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end




@interface QRCodePixelShapeShiny (SWIFT_EXTENSION(QRCode))
/// Returns true if the shape supports setting a value for the specified key, false otherwise
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the current settings for the shape
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end



@interface QRCodeFillStyleSolid (SWIFT_EXTENSION(QRCode))
- (SVGDefinition * _Nullable)svgRepresentationWithStyleIdentifier:(NSString * _Nonnull)styleIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePixelShapeSquare (SWIFT_EXTENSION(QRCode))
/// Returns true if the shape supports setting a value for the specified key, false otherwise
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the current settings for the shape
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePixelShapeSquircle (SWIFT_EXTENSION(QRCode))
/// Returns true if the shape supports setting a value for the specified key, false otherwise
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the current settings for the shape
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodePixelShapeStar (SWIFT_EXTENSION(QRCode))
/// Returns true if the shape supports setting a value for the specified key, false otherwise
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the current settings for the shape
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeStyle (SWIFT_EXTENSION(QRCode))
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
+ (QRCodeStyle * _Nullable)CreateWithSettings:(NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
@end


@interface QRCodeStyle (SWIFT_EXTENSION(QRCode))
/// Returns the eye style that will be used when drawing. Handles the case where the eye style is nil
@property (nonatomic, readonly, strong) id <QRCodeFillStyleGenerator> _Nonnull actualEyeStyle;
/// Returns the pupil style that will be used when drawing. Handles the case where the pupil style is nil
@property (nonatomic, readonly, strong) id <QRCodeFillStyleGenerator> _Nonnull actualPupilStyle;
@end


@interface QRCodePixelShapeVertical (SWIFT_EXTENSION(QRCode))
/// Does the shape generator support setting values for a particular key?
- (BOOL)supportsSettingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns a storable representation of the shape handler
- (NSDictionary<NSString *, id> * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Set a configuration value for a particular setting string
- (BOOL)setSettingValue:(id _Nullable)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif
