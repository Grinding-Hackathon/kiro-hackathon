name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: offline_wallet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Setup environment variables
      run: |
        cd backend
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/offline_wallet_test" >> .env
        echo "NODE_ENV=test" >> .env

    - name: Run database migrations
      run: |
        cd backend
        npm run migrate

    - name: Run linting
      run: |
        cd backend
        npm run lint

    - name: Run unit tests
      run: |
        cd backend
        npm run test -- --coverage --testPathPattern="src/test/.*\.test\.ts$" --testPathIgnorePatterns="integration|e2e|performance"

    - name: Run integration tests
      run: |
        cd backend
        npm run test -- --testPathPattern="src/test/integration/.*\.test\.ts$"

    - name: Run end-to-end tests
      run: |
        cd backend
        npm run test -- --testPathPattern="src/test/e2e/.*\.test\.ts$"

    - name: Run performance tests
      run: |
        cd backend
        npm run test -- --testPathPattern="src/test/performance/.*\.test\.ts$" --testTimeout=30000

    - name: Run smart contract tests
      run: |
        cd backend
        npm run test:contracts

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

    - name: Build application
      run: |
        cd backend
        npm run build

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level=moderate

    - name: Run dependency vulnerability check
      run: |
        cd backend
        npx audit-ci --moderate

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Build application
      run: |
        cd backend
        npm run build

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke test commands here

    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here